"""
Research Report Formatter
Generates professional markdown reports from research findings
"""
import re
from typing import List, Dict, Any, Optional
from datetime import datetime


def format_research_report(
    target: str,
    synthesis: str,
    sources: List[Dict[str, Any]],
    metadata: Dict[str, Any]
) -> str:
    """
    Format comprehensive research report in markdown.
    
    Args:
        target: Research target (company/person name)
        synthesis: AI-synthesized research findings
        sources: List of source dicts with title, url, content
        metadata: Additional metadata (execution_time, agents_used, etc.)
        
    Returns:
        Formatted markdown report
    """
    
    # Extract metadata
    execution_time = metadata.get('execution_time', 0)
    agents_used = metadata.get('agents_used', [])
    person_name = metadata.get('person_name')
    timestamp = metadata.get('timestamp', datetime.utcnow().isoformat())
    
    # Format timestamp
    try:
        dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
        formatted_date = dt.strftime('%B %d, %Y at %H:%M UTC')
    except:
        formatted_date = timestamp
    
    # Build report sections
    report_parts = []
    
    # Header
    report_parts.append(f"# Market Research Report: {sanitize_markdown(target)}")
    report_parts.append("")
    report_parts.append(f"*Generated on {formatted_date} | {len(sources)} sources analyzed | Research completed in {execution_time:.1f}s*")
    report_parts.append("")
    report_parts.append("---")
    report_parts.append("")
    
    # Main Content - The synthesis already contains structured sections
    report_parts.append(synthesis)
    report_parts.append("")
    report_parts.append("---")
    report_parts.append("")
    
    # Research Metadata
    report_parts.append("## Research Methodology")
    report_parts.append("")
    report_parts.append(f"**Target:** {sanitize_markdown(target)}")
    report_parts.append(f"**Research Agents:** {', '.join([agent.replace('_', ' ').title() for agent in agents_used])}")
    if person_name:
        report_parts.append(f"**Person Focus:** {sanitize_markdown(person_name)}")
    report_parts.append(f"**Execution Time:** {execution_time:.1f} seconds")
    report_parts.append(f"**Total Sources:** {len(sources)}")
    report_parts.append("")
    report_parts.append("---")
    report_parts.append("")
    
    # Sources Section
    report_parts.append("## Sources")
    report_parts.append("")
    report_parts.append("The following sources were analyzed to compile this report:")
    report_parts.append("")
    
    # List top sources (limit to 15 for readability)
    for i, source in enumerate(sources[:15], 1):
        title = sanitize_markdown(source.get('title', 'Unknown Source'))
        url = source.get('url', '#')
        
        # Clean and truncate title
        title = truncate_text(title, max_length=100)
        
        report_parts.append(f"{i}. **{title}**")
        report_parts.append(f"   - {url}")
        
        # Optionally include snippet
        content = source.get('content', '')
        if content:
            snippet = truncate_text(content, max_length=150)
            snippet = sanitize_markdown(snippet)
            report_parts.append(f"   - *{snippet}...*")
        
        report_parts.append("")
    
    if len(sources) > 15:
        report_parts.append(f"*...and {len(sources) - 15} additional sources*")
        report_parts.append("")
    
    report_parts.append("---")
    report_parts.append("")
    
    # Footer
    report_parts.append("## About This Report")
    report_parts.append("")
    report_parts.append("This report was generated by **CLARIQ Research Agents**, a multi-agent AI system that:")
    report_parts.append("")
    report_parts.append("- 🔍 Searches and analyzes web sources using Exa AI")
    report_parts.append("- 🤖 Synthesizes insights using Cerebras AI (Llama 4 Scout)")
    report_parts.append("- 🎯 Employs specialized agents for different research aspects")
    report_parts.append("- 🔄 Includes feedback loops to identify and fill information gaps")
    report_parts.append("")
    report_parts.append("*For questions or feedback, please contact your research administrator.*")
    report_parts.append("")
    
    # Join all parts
    return "\n".join(report_parts)


def sanitize_markdown(text: str) -> str:
    """
    Sanitize text for markdown to prevent formatting issues.
    
    Args:
        text: Raw text to sanitize
        
    Returns:
        Sanitized text safe for markdown
    """
    if not text:
        return ""
    
    # Replace problematic characters
    text = str(text)
    
    # Escape markdown special characters in certain contexts
    # (be careful not to break intentional markdown in synthesis)
    text = text.replace('[', '\\[').replace(']', '\\]')
    
    # Remove excessive whitespace
    text = re.sub(r'\s+', ' ', text)
    text = text.strip()
    
    return text


def truncate_text(text: str, max_length: int = 100) -> str:
    """
    Truncate text to a maximum length, breaking at word boundaries.
    
    Args:
        text: Text to truncate
        max_length: Maximum length in characters
        
    Returns:
        Truncated text
    """
    if not text or len(text) <= max_length:
        return text
    
    # Truncate at word boundary
    truncated = text[:max_length].rsplit(' ', 1)[0]
    return truncated.strip()


def format_sources_list(sources: List[Dict[str, Any]], max_sources: int = 10) -> str:
    """
    Format sources as a numbered markdown list.
    
    Args:
        sources: List of source dicts
        max_sources: Maximum number of sources to include
        
    Returns:
        Formatted markdown list
    """
    lines = []
    
    for i, source in enumerate(sources[:max_sources], 1):
        title = sanitize_markdown(source.get('title', 'Unknown'))
        url = source.get('url', '#')
        lines.append(f"{i}. [{title}]({url})")
    
    return "\n".join(lines)


def format_executive_summary(
    target: str,
    key_findings: List[str],
    source_count: int
) -> str:
    """
    Format an executive summary section.
    
    Args:
        target: Research target
        key_findings: List of key finding strings
        source_count: Number of sources analyzed
        
    Returns:
        Formatted executive summary markdown
    """
    lines = [
        "## Executive Summary",
        "",
        f"This report provides comprehensive research on **{sanitize_markdown(target)}** based on analysis of {source_count} authoritative sources.",
        "",
        "### Key Findings",
        ""
    ]
    
    for finding in key_findings:
        lines.append(f"- {finding}")
    
    lines.append("")
    
    return "\n".join(lines)


def format_person_section(
    person_name: str,
    profile: str,
    talking_points: Optional[str] = None
) -> str:
    """
    Format person research section.
    
    Args:
        person_name: Person's name
        profile: Person profile text
        talking_points: Optional talking points text
        
    Returns:
        Formatted person section markdown
    """
    lines = [
        f"## Person Profile: {sanitize_markdown(person_name)}",
        "",
        profile,
        ""
    ]
    
    if talking_points:
        lines.extend([
            "### Suggested Talking Points",
            "",
            talking_points,
            ""
        ])
    
    return "\n".join(lines)


def create_table_of_contents(sections: List[str]) -> str:
    """
    Create a table of contents from section titles.
    
    Args:
        sections: List of section titles
        
    Returns:
        Formatted table of contents
    """
    lines = [
        "## Table of Contents",
        ""
    ]
    
    for i, section in enumerate(sections, 1):
        # Convert to anchor link
        anchor = section.lower().replace(' ', '-').replace(':', '')
        lines.append(f"{i}. [{section}](#{anchor})")
    
    lines.append("")
    
    return "\n".join(lines)


def wrap_in_collapsible(title: str, content: str) -> str:
    """
    Wrap content in a collapsible markdown section (GitHub style).
    
    Args:
        title: Section title
        content: Content to wrap
        
    Returns:
        Wrapped content
    """
    return f"""<details>
<summary><strong>{title}</strong></summary>

{content}

</details>"""


def format_metadata_footer(metadata: Dict[str, Any]) -> str:
    """
    Format metadata footer with research details.
    
    Args:
        metadata: Metadata dictionary
        
    Returns:
        Formatted footer markdown
    """
    execution_time = metadata.get('execution_time', 0)
    agents = metadata.get('agents_used', [])
    timestamp = metadata.get('timestamp', '')
    
    try:
        dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
        date_str = dt.strftime('%Y-%m-%d %H:%M:%S UTC')
    except:
        date_str = 'Unknown'
    
    lines = [
        "---",
        "",
        "### Research Metadata",
        "",
        f"- **Generated:** {date_str}",
        f"- **Execution Time:** {execution_time:.1f}s",
        f"- **Agents Used:** {', '.join([a.replace('_', ' ').title() for a in agents])}",
        f"- **Powered by:** Cerebras AI + Exa Search",
        ""
    ]
    
    return "\n".join(lines)
